{"version":3,"sources":["state/answer/types.js","state/answer/actions.js","state/answer/reducers.js","state/question/types.js","state/question/actions.js","state/question/reducers.js","state/question/selectors.js","state/question/constants.js","state/question/index.js","state/answer/selectors.js","state/answer/utils.js","state/answer/index.js","views/components/Divider/Divider.js","views/components/Divider/styles.js","views/containers/AnswerForm/styles.js","views/containers/AnswerForm/Placeholder.js","views/containers/AnswerForm/AnswerForm.js","state/answer/constants.js","state/types.js","state/error/types.js","state/error/actions.js","state/error/reducers.js","state/error/selectors.js","state/error/index.js","views/components/Input/Input.js","views/components/Input/styles.js","views/components/QuestionOption/QuestionOption.js","views/components/QuestionOption/style.js","views/containers/QuestionOptionsForm/QuestionOptionsForm.js","views/containers/QuestionTextForm/QuestionTextForm.js","views/containers/QuestionForm/QuestionForm.js","state/actions.js","views/containers/QuestionForm/styles.js","views/components/BarChart/BarChart.js","views/containers/Results/styles.js","views/containers/Results/Placeholder.js","views/containers/Results/Results.js","views/layouts/Main/Main.js","views/layouts/Main/styles.js","App.js","state/index.js","configureStore.js","index.js"],"names":["types","createAnswer","questionOptionId","type","payload","created","Date","now","reducer","combineReducers","answers","state","arguments","length","undefined","action","concat","Object","toConsumableArray","question_types","setQuestionText","questionText","createQuestionOption","questionOptionText","id","uniqid","modified","setQuestionOption","removeQuestionOption","questionOptions","push","index","map","questionOption","indexOf","newQuestionOption","objectSpread","splice","questionState","question","questionTextSelector","createSelector","questionOptionsSelector","constants","answersSelector","answer","answersAmountSelector","answerChartDataSelector","questionSelectors","string","maxLength","lenth","substr","amount","filter","withStyles","root","margin","_ref","classes","react_default","a","createElement","Divider_default","light","variant","AnswerForm_styles","height","placeholder","textAlign","Placeholder","minimumAnswerOptions","Grid_default","className","classNames","container","direction","justify","alignItems","Typography_default","defaultProps","styles","AnswerForm","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","selectedQuestionOptionId","handleChange","event","value","target","setState","submitAnswer","props","inherits","createClass","key","_this$props","minimumOptionsToVote","AnswerForm_Placeholder","item","components_Divider_Divider","FormControl_default","component","RadioGroup_default","name","onChange","FormControlLabel_default","control","Radio_default","label","wrap","Button_default","disabled","onClick","Component","mapStateToProps","createStructuredSelector","mapDispatchToProps","answerActions","compose","connect","state_types","error_types","setError","message","clearError","errorInfo","defineProperty","errorInfoSelector","error","Input","passThroughProps","errorMessage","react","TextField_default","assign","fullWidth","inputProps","InputProps","input","InputLabelProps","color","transform","QuestionOption","_this2","maxQuestionOptionTextLength","onDelete","onEdit","spacing","components_Input_Input","e","onBlur","questionConstants","marginBottom","QuestionOptionsForm","newQuestionOptionText","isDuplicateQuestionOptionText","find","editQuestionOption","submitQuestionOption","_this$props2","_this$props3","maxQuestionOptions","newQuestionOptionDisabled","components_QuestionOption_QuestionOption","errorSelectors","questionActions","errorActions","QuestionTextForm","QuestionForm","purgeState","containers_QuestionTextForm_QuestionTextForm","containers_QuestionOptionsForm_QuestionOptionsForm","BarChart","width","data","xAxisDataKey","barDataKey","style","es6","dataKey","fill","Results_styles","Results","answersAmount","answerChartData","console","log","components_BarChart_BarChart","left","right","bottom","Results_Placeholder","answerSelectors","flexGrow","headerText","box","padding","minHeight","border","xs","sm","containers_QuestionForm_QuestionForm","containers_AnswerForm_AnswerForm","containers_Results_Results","App","store","es","layouts_Main_Main","appReducer","rootReducer","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d4c015cb.chunk.js","sourcesContent":["export default {\n  CREATE_ANSWER: 'answer/CREATE_ANSWER',\n};\n","import types from './types';\n\nexport const createAnswer = questionOptionId => ({\n  type: types.CREATE_ANSWER,\n  payload: {\n    questionOptionId,\n    created: Date.now(),\n  },\n});\n","import { combineReducers } from 'redux';\nimport types from './types';\n\nconst answersReducer = (state = [], action) => {\n  switch (action.type) {\n    case types.CREATE_ANSWER: {\n      return [...state, action.payload];\n    }\n    default:\n      return state;\n  }\n};\n\nconst reducer = combineReducers({\n  answers: answersReducer,\n});\n\nexport default reducer;\n","export default {\n  SET_QUESTION_TEXT: 'question/SET_QUESTION_TEXT',\n  CREATE_QUESTION_OPTION: 'question/CREATE_QUESTION_OPTION',\n  SET_QUESTION_OPTION: 'question/SET_QUESTION_OPTION',\n  REMOVE_QUESTION_OPTION: 'question/REMOVE_QUESTION_OPTION',\n};\n","import uniqid from 'uniqid';\nimport types from './types';\n\nexport const setQuestionText = questionText => ({\n  type: types.SET_QUESTION_TEXT,\n  payload: {\n    questionText,\n  },\n});\n\nexport const createQuestionOption = questionOptionText => ({\n  type: types.CREATE_QUESTION_OPTION,\n  payload: {\n    id: uniqid(),\n    questionOptionText,\n    created: Date.now(),\n    modified: null,\n  },\n});\n\nexport const setQuestionOption = (id, questionOptionText) => ({\n  type: types.SET_QUESTION_OPTION,\n  payload: {\n    id,\n    questionOptionText,\n    modified: Date.now(),\n  },\n});\n\nexport const removeQuestionOption = id => ({\n  type: types.REMOVE_QUESTION_OPTION,\n  payload: {\n    id,\n  },\n});\n","import { combineReducers } from 'redux';\nimport types from './types';\n\nconst questionTextReducer = (state = '', action) => {\n  switch (action.type) {\n    case types.SET_QUESTION_TEXT: {\n      const { questionText } = action.payload;\n      return questionText;\n    }\n    default:\n      return state;\n  }\n};\n\nconst questionOptionsReducer = (state = [], action) => {\n  switch (action.type) {\n    case types.CREATE_QUESTION_OPTION: {\n      const questionOptions = [...state];\n      questionOptions.push(action.payload);\n      return questionOptions;\n    }\n    case types.SET_QUESTION_OPTION: {\n      const { id } = action.payload;\n      const questionOptions = [...state];\n\n      const index = questionOptions\n        .map(questionOption => questionOption.id)\n        .indexOf(id);\n\n      if (index === -1) {\n        // not found\n        return state;\n      }\n\n      const questionOption = questionOptions[index];\n      const newQuestionOption = {\n        ...questionOption,\n        ...action.payload,\n      };\n\n      questionOptions[index] = newQuestionOption;\n      return questionOptions;\n    }\n    case types.REMOVE_QUESTION_OPTION: {\n      const { id } = action.payload;\n      const questionOptions = [...state];\n\n      const index = questionOptions\n        .map(questionOption => questionOption.id)\n        .indexOf(id);\n\n      if (index === -1) {\n        // not found\n        return state;\n      }\n\n      questionOptions.splice(index, 1);\n      return questionOptions;\n    }\n    default:\n      return state;\n  }\n};\n\nconst reducer = combineReducers({\n  questionText: questionTextReducer,\n  questionOptions: questionOptionsReducer,\n});\n\nexport default reducer;\n","import { createSelector } from 'reselect';\n\nconst questionState = state => state.question;\n\nexport const questionTextSelector = createSelector(\n  questionState,\n  question => question.questionText\n);\n\nexport const questionOptionsSelector = createSelector(\n  questionState,\n  question => question.questionOptions\n);\n","export default {\n  MAX_TEXT_LENGTH: 80,\n  MAX_QUESTION_OPTIONS: 10,\n};\n","import * as questionActions from './actions';\nimport reducer from './reducers';\nimport * as questionSelectors from './selectors';\n\nexport { default as questionConstants } from './constants';\nexport { default as questionTypes } from './types';\nexport { questionActions };\nexport { questionSelectors };\n\nexport default reducer;\n","import { createSelector } from 'reselect';\nimport { questionSelectors } from '../question';\nimport { truncate } from './utils';\n\nconst answerState = state => state.answer;\n\nconst answersSelector = createSelector(\n  answerState,\n  answer => answer.answers\n);\n\nexport const answersAmountSelector = createSelector(\n  answersSelector,\n  answers => answers.length\n);\n\nexport const answerChartDataSelector = createSelector(\n  questionSelectors.questionOptionsSelector,\n  answersSelector,\n  (questionOptions, answers) =>\n    questionOptions.map(questionOption => {\n      const { id, questionOptionText } = questionOption;\n      return {\n        questionOptionText: truncate(questionOptionText, 8),\n        amount: answers.filter(answer => answer.questionOptionId === id).length,\n      };\n    })\n);\n","export const truncate = (string, maxLength) =>\n  string.lenth <= maxLength ? string : `${string.substr(0, maxLength - 3)}...`;\n","import * as answerActions from './actions';\nimport reducer from './reducers';\nimport * as answerSelectors from './selectors';\n\nexport { default as answerConstants } from './constants';\nexport { default as answerTypes } from './types';\nexport { answerActions };\nexport { answerSelectors };\n\nexport default reducer;\n","import DividerMUI from '@material-ui/core/Divider';\nimport { withStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport styles from './styles';\n\nconst Divider = ({ classes }) => (\n  <DividerMUI light variant=\"middle\" classes={classes} />\n);\n\nexport default withStyles(styles)(Divider);\n","export default {\n  root: {\n    margin: '10px 0',\n  },\n};\n","export default {\n  root: {\n    height: '100%',\n  },\n  placeholder: {\n    textAlign: 'center',\n  },\n};\n","import Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styles from './styles';\n\nconst Placeholder = ({ minimumAnswerOptions, classes }) => (\n  <Grid\n    className={classNames(classes.root, classes.placeholder)}\n    container\n    direction=\"column\"\n    justify=\"center\"\n    alignItems=\"center\"\n  >\n    <Typography>\n      {`To vote, please define your question and at least ${minimumAnswerOptions} answer options.`}\n    </Typography>\n  </Grid>\n);\n\nPlaceholder.propTypes = {\n  classes: PropTypes.object,\n  minimumAnswerOptions: PropTypes.number,\n};\n\nPlaceholder.defaultProps = {\n  classes: {},\n  minimumAnswerOptions: 2,\n};\n\nexport default withStyles(styles)(Placeholder);\n","import Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport { answerActions, answerConstants } from '../../../state/answer';\nimport { questionSelectors } from '../../../state/question';\nimport Divider from '../../components/Divider/Divider';\nimport Placeholder from './Placeholder';\nimport styles from './styles';\n\nexport class AnswerForm extends Component {\n  state = {\n    selectedQuestionOptionId: '',\n  };\n\n  handleChange = event => {\n    const { value } = event.target;\n    this.setState({ selectedQuestionOptionId: value });\n  };\n\n  submitAnswer = () => {\n    const { createAnswer } = this.props;\n    const { selectedQuestionOptionId } = this.state;\n\n    createAnswer(selectedQuestionOptionId);\n    this.setState({\n      selectedQuestionOptionId: '',\n    });\n  };\n\n  render() {\n    const { selectedQuestionOptionId } = this.state;\n    const {\n      questionText,\n      classes,\n      questionOptions,\n      minimumOptionsToVote,\n    } = this.props;\n\n    if (!questionText || questionOptions.length < minimumOptionsToVote) {\n      return <Placeholder minimumAnswerOptions={minimumOptionsToVote} />;\n    }\n\n    return (\n      <Grid\n        className={classes.root}\n        container\n        direction=\"column\"\n        justify=\"space-between\"\n      >\n        <Grid container item direction=\"column\">\n          {questionText}\n\n          <Divider />\n\n          <FormControl component=\"fieldset\">\n            <RadioGroup\n              name=\"answer-options\"\n              value={selectedQuestionOptionId}\n              onChange={this.handleChange}\n            >\n              {questionOptions.map(questionOption => {\n                const { id, questionOptionText } = questionOption;\n                return (\n                  <FormControlLabel\n                    key={id}\n                    value={id}\n                    control={<Radio />}\n                    label={questionOptionText}\n                  />\n                );\n              })}\n            </RadioGroup>\n          </FormControl>\n        </Grid>\n\n        <Grid item>\n          <Divider />\n\n          <Grid\n            container\n            item\n            justify=\"flex-end\"\n            alignItems=\"center\"\n            direction=\"row\"\n            wrap=\"nowrap\"\n          >\n            <Button\n              disabled={!selectedQuestionOptionId}\n              variant=\"outlined\"\n              onClick={this.submitAnswer}\n            >\n              Vote\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nAnswerForm.propTypes = {\n  minimumOptionsToVote: PropTypes.number,\n  questionText: PropTypes.string,\n  questionOptions: PropTypes.array,\n  createAnswer: PropTypes.func,\n};\n\nAnswerForm.defaultProps = {\n  minimumOptionsToVote: answerConstants.MIN_QUESTION_OPTIONS_TO_VOTE,\n  questionText: '',\n  questionOptions: [],\n  createAnswer: () => {},\n};\n\nconst mapStateToProps = createStructuredSelector({\n  questionText: questionSelectors.questionTextSelector,\n  questionOptions: questionSelectors.questionOptionsSelector,\n});\n\nconst mapDispatchToProps = {\n  createAnswer: answerActions.createAnswer,\n};\n\nexport default compose(\n  withStyles(styles),\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(AnswerForm);\n","export default {\n  MIN_QUESTION_OPTIONS_TO_VOTE: 2,\n};\n","export default {\n  PURGE_STATE: 'global/PURGE_STATE',\n};\n","export default {\n  SET_ERROR: 'error/SET_ERROR',\n  CLEAR_ERROR: 'error/CLEAR_ERROR',\n};\n","import types from './types';\n\nexport const setError = (id, message) => ({\n  type: types.SET_ERROR,\n  payload: {\n    id,\n    message,\n  },\n});\n\nexport const clearError = id => ({\n  type: types.CLEAR_ERROR,\n  payload: {\n    id,\n  },\n});\n","import { combineReducers } from 'redux';\nimport types from './types';\n\nconst errorInfoReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.SET_ERROR: {\n      return {\n        ...state,\n        [action.payload.id]: action.payload,\n      };\n    }\n    case types.CLEAR_ERROR: {\n      return {\n        ...state,\n        [action.payload.id]: undefined,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst reducer = combineReducers({\n  errorInfo: errorInfoReducer,\n});\n\nexport default reducer;\n","import { createSelector } from 'reselect';\n\nconst errorState = state => state.error;\n\nexport const errorInfoSelector = createSelector(\n  errorState,\n  error => error.errorInfo\n);\n","import * as errorActions from './actions';\nimport reducer from './reducers';\nimport * as errorSelectors from './selectors';\n\nexport { default as errorTypes } from './types';\nexport { errorActions };\nexport { errorSelectors };\n\nexport default reducer;\n","import { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport styles from './styles';\n\nconst Input = props => {\n  const passThroughProps = {\n    ...props,\n  };\n  delete passThroughProps.classes;\n  delete passThroughProps.maxLength;\n  delete passThroughProps.errorMessage;\n\n  return (\n    <Fragment>\n      <TextField\n        error={!!props.errorMessage}\n        fullWidth\n        inputProps={{\n          maxLength: props.maxLength,\n        }}\n        // eslint-disable-next-line react/jsx-no-duplicate-props\n        InputProps={{ classes: { root: props.classes.input } }}\n        InputLabelProps={{ classes: { root: props.classes.label } }}\n        variant=\"outlined\"\n        {...passThroughProps}\n      />\n      <Typography variant=\"caption\" color=\"error\">\n        {props.errorMessage}\n      </Typography>\n    </Fragment>\n  );\n};\n\nInput.propTypes = {\n  classes: PropTypes.object.isRequired,\n  maxLength: PropTypes.number,\n  errorMessage: PropTypes.string,\n};\n\nInput.defaultProps = {\n  errorMessage: null,\n};\n\nexport default withStyles(styles)(Input);\n","export default {\n  input: {\n    height: 36,\n  },\n  label: {\n    transform: 'translate(14px, 10px) scale(1)',\n  },\n};\n","import Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { questionConstants } from '../../../state/question';\nimport Input from '../../components/Input/Input';\nimport style from './style';\n\nclass QuestionOption extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionOptionText: props.questionOptionText,\n    };\n  }\n\n  render() {\n    const { questionOptionText } = this.state;\n    const {\n      id,\n      maxQuestionOptionTextLength,\n      onDelete,\n      onEdit,\n      classes,\n      clearError,\n      errorMessage,\n    } = this.props;\n\n    return (\n      <Grid\n        className={classes.root}\n        container\n        justify=\"space-between\"\n        alignItems=\"center\"\n        direction=\"row\"\n        wrap=\"nowrap\"\n        spacing={8}\n      >\n        <Grid item>\n          <Input\n            key={id}\n            id={id}\n            errorMessage={errorMessage}\n            value={questionOptionText}\n            maxLength={maxQuestionOptionTextLength}\n            onChange={e => {\n              const { value } = e.target;\n              this.setState(\n                {\n                  questionOptionText: value,\n                },\n                clearError\n              );\n            }}\n            onBlur={e => {\n              const { value } = e.target;\n              onEdit(id, value);\n            }}\n          />\n        </Grid>\n        <Grid item>\n          <Button variant=\"outlined\" onClick={onDelete}>\n            Del\n          </Button>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nQuestionOption.propTypes = {\n  classes: PropTypes.object,\n  id: PropTypes.string.isRequired,\n  questionOptionText: PropTypes.string,\n  maxQuestionOptionTextLength: PropTypes.number,\n  onDelete: PropTypes.func,\n  onEdit: PropTypes.func,\n  clearError: PropTypes.func,\n  errorMessage: PropTypes.string,\n};\n\nQuestionOption.defaultProps = {\n  classes: {},\n  questionOptionText: '',\n  maxQuestionOptionTextLength: questionConstants.MAX_TEXT_LENGTH,\n  onDelete: () => {},\n  onEdit: () => {},\n  clearError: () => {},\n  errorMessage: null,\n};\n\nexport default withStyles(style)(QuestionOption);\n","export default {\n  root: {\n    marginBottom: 5,\n  },\n};\n","import Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport { errorActions, errorSelectors } from '../../../state/error';\nimport {\n  questionActions,\n  questionConstants,\n  questionSelectors,\n} from '../../../state/question';\nimport Input from '../../components/Input/Input';\nimport QuestionOption from '../../components/QuestionOption/QuestionOption';\n\nclass QuestionOptionsForm extends Component {\n  state = {\n    newQuestionOptionText: '',\n  };\n\n  isDuplicateQuestionOptionText = (questionOptionText, id) => {\n    const { questionOptions } = this.props;\n\n    // It can not be a duplicated of self if existing\n    return !!questionOptions\n      .filter(questionOption => questionOption.id !== id)\n      .find(\n        questionOption =>\n          questionOption.questionOptionText === questionOptionText\n      );\n  };\n\n  editQuestionOption = (id, questionOptionText) => {\n    const { setQuestionOption, setError, clearError } = this.props;\n\n    if (this.isDuplicateQuestionOptionText(questionOptionText, id)) {\n      setError(id, 'The provided option is not unique.');\n      return;\n    }\n\n    clearError(id);\n    setQuestionOption(id, questionOptionText);\n  };\n\n  submitQuestionOption = () => {\n    const { createQuestionOption, setError, clearError } = this.props;\n    const { newQuestionOptionText } = this.state;\n\n    if (!newQuestionOptionText) {\n      return;\n    }\n\n    if (this.isDuplicateQuestionOptionText(newQuestionOptionText)) {\n      setError('newQuestionOption', 'The provided option is not unique.');\n      return;\n    }\n\n    clearError('newQuestionOption');\n    createQuestionOption(newQuestionOptionText);\n\n    this.setState({\n      newQuestionOptionText: '',\n    });\n  };\n\n  render() {\n    const {\n      maxQuestionOptionTextLength,\n      maxQuestionOptions,\n      questionOptions,\n      removeQuestionOption,\n      clearError,\n      errorInfo,\n    } = this.props;\n\n    const { newQuestionOptionText } = this.state;\n\n    const newQuestionOptionDisabled =\n      questionOptions.length >= maxQuestionOptions;\n\n    return (\n      <Fragment>\n        {questionOptions.map(questionOption => {\n          const { id, questionOptionText } = questionOption;\n          return (\n            <QuestionOption\n              key={id}\n              id={id}\n              questionOptionText={questionOptionText}\n              onEdit={this.editQuestionOption}\n              onDelete={() => removeQuestionOption(id)}\n              clearError={() => clearError(id)}\n              errorMessage={errorInfo[id] ? errorInfo[id].message : null}\n            />\n          );\n        })}\n\n        <Grid\n          container\n          justify=\"space-between\"\n          alignItems=\"center\"\n          direction=\"row\"\n          wrap=\"nowrap\"\n          spacing={8}\n        >\n          <Grid item>\n            <Input\n              errorMessage={\n                errorInfo['newQuestionOption']\n                  ? errorInfo['newQuestionOption'].message\n                  : null\n              }\n              disabled={newQuestionOptionDisabled}\n              value={newQuestionOptionText}\n              label=\"Type an answer\"\n              placeholder=\"3.14\"\n              maxLength={maxQuestionOptionTextLength}\n              onChange={e => {\n                const { value } = e.target;\n                this.setState(\n                  {\n                    newQuestionOptionText: value,\n                  },\n                  () => {\n                    clearError('newQuestionOption');\n                  }\n                );\n              }}\n            />\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"outlined\"\n              onClick={this.submitQuestionOption}\n              disabled={newQuestionOptionDisabled}\n            >\n              Add\n            </Button>\n          </Grid>\n        </Grid>\n      </Fragment>\n    );\n  }\n}\n\nQuestionOptionsForm.propTypes = {\n  createQuestionOption: PropTypes.func,\n  setQuestionOption: PropTypes.func,\n  removeQuestionOption: PropTypes.func,\n  setError: PropTypes.func,\n  clearError: PropTypes.func,\n  errorInfo: PropTypes.object,\n  maxQuestionOptions: PropTypes.number,\n  maxQuestionOptionTextLength: PropTypes.number,\n  questionOptions: PropTypes.array,\n};\n\nQuestionOptionsForm.defaultProps = {\n  createQuestionOption: () => {},\n  setQuestionOption: () => {},\n  removeQuestionOption: () => {},\n  setError: () => {},\n  clearError: () => {},\n  errorInfo: {},\n  maxQuestionOptions: questionConstants.MAX_QUESTION_OPTIONS,\n  maxQuestionOptionTextLength: questionConstants.MAX_TEXT_LENGTH,\n  questionOptions: [],\n};\n\nconst mapStateToProps = createStructuredSelector({\n  questionOptions: questionSelectors.questionOptionsSelector,\n  errorInfo: errorSelectors.errorInfoSelector,\n});\n\nconst mapDispatchToProps = {\n  createQuestionOption: questionActions.createQuestionOption,\n  setQuestionOption: questionActions.setQuestionOption,\n  removeQuestionOption: questionActions.removeQuestionOption,\n  setError: errorActions.setError,\n  clearError: errorActions.clearError,\n};\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(QuestionOptionsForm);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport {\n  questionActions,\n  questionConstants,\n  questionSelectors,\n} from '../../../state/question';\nimport Input from '../../components/Input/Input';\n\nconst QuestionTextForm = ({ setQuestionText, questionText }) => (\n  <Input\n    value={questionText}\n    label=\"Your question\"\n    placeholder=\"What is the value of pi?\"\n    maxLength={questionConstants.MAX_TEXT_LENGTH}\n    onChange={e => {\n      const { value } = e.target;\n      setQuestionText(value);\n    }}\n  />\n);\n\nQuestionTextForm.propTypes = {\n  questionText: PropTypes.string,\n  setQuestionText: PropTypes.func,\n};\n\nQuestionTextForm.defaultProps = {\n  questionText: '',\n  setQuestionText: () => {},\n};\n\nconst mapStateToProps = createStructuredSelector({\n  questionText: questionSelectors.questionTextSelector,\n});\n\nconst mapDispatchToProps = {\n  setQuestionText: questionActions.setQuestionText,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(QuestionTextForm);\n","import Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport * as globalActions from '../../../state/actions';\nimport { questionConstants, questionSelectors } from '../../../state/question';\nimport Divider from '../../components/Divider/Divider';\nimport QuestionOptionsForm from '../QuestionOptionsForm/QuestionOptionsForm';\nimport QuestionTextForm from '../QuestionTextForm/QuestionTextForm';\nimport styles from './styles';\n\nexport const QuestionForm = ({\n  classes,\n  questionOptions,\n  maxQuestionOptions,\n  purgeState,\n}) => (\n  <Grid\n    className={classes.root}\n    container\n    direction=\"column\"\n    justify=\"space-between\"\n  >\n    <Grid container item direction=\"column\">\n      <QuestionTextForm />\n      <Divider />\n      <QuestionOptionsForm />\n    </Grid>\n\n    <Grid item>\n      <Divider />\n\n      <Grid\n        container\n        item\n        justify=\"space-between\"\n        alignItems=\"center\"\n        direction=\"row\"\n        wrap=\"nowrap\"\n      >\n        <Grid item>\n          <Typography>\n            {`${questionOptions.length}/${maxQuestionOptions} possible answers`}\n          </Typography>\n        </Grid>\n        <Button variant=\"outlined\" onClick={purgeState}>\n          Reset\n        </Button>\n      </Grid>\n    </Grid>\n  </Grid>\n);\n\nQuestionForm.propTypes = {\n  maxQuestionOptions: PropTypes.number,\n  questionOptions: PropTypes.array,\n  purgeState: PropTypes.func,\n};\n\nQuestionForm.defaultProps = {\n  maxQuestionOptions: questionConstants.MAX_QUESTION_OPTIONS,\n  questionOptions: [],\n  purgeState: () => {},\n};\n\nconst mapStateToProps = createStructuredSelector({\n  questionOptions: questionSelectors.questionOptionsSelector,\n});\n\nconst mapDispatchToProps = {\n  purgeState: globalActions.purgeState,\n};\n\nexport default compose(\n  withStyles(styles),\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(QuestionForm);\n","import types from './types';\n\nexport const purgeState = () => ({\n  type: types.PURGE_STATE,\n});\n","export default {\n  root: {\n    height: '100%',\n  },\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  Bar,\n  BarChart as ReBarChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\n\nconst BarChart = ({\n  width,\n  height,\n  data,\n  margin,\n  xAxisDataKey,\n  barDataKey,\n}) => (\n  <div style={{ width, height }}>\n    <ResponsiveContainer>\n      <ReBarChart data={data} margin={margin}>\n        <XAxis dataKey={xAxisDataKey} />\n        <YAxis />\n        <Tooltip />\n        <Bar dataKey={barDataKey} fill=\"#8884d8\" />\n      </ReBarChart>\n    </ResponsiveContainer>\n  </div>\n);\n\nBarChart.propTypes = {\n  height: PropTypes.number,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  margin: PropTypes.object,\n  data: PropTypes.array,\n  xAxisDataKey: PropTypes.string,\n  barDataKey: PropTypes.string,\n};\n\nBarChart.defaultProps = {\n  height: 250,\n  width: '100%',\n  data: [],\n  margin: {},\n  xAxisDataKey: 'name',\n  barDataKey: 'amount',\n};\n\nexport default BarChart;\n","export default {\n  root: {\n    height: '100%',\n  },\n  placeholder: {\n    textAlign: 'center',\n  },\n};\n","import Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styles from './styles';\n\nconst Placeholder = ({ classes }) => (\n  <Grid\n    className={classNames(classes.root, classes.placeholder)}\n    container\n    direction=\"column\"\n    justify=\"center\"\n    alignItems=\"center\"\n  >\n    <Typography>Waiting for votes to come in...</Typography>\n  </Grid>\n);\n\nPlaceholder.propTypes = {\n  classes: PropTypes.object,\n};\n\nPlaceholder.defaultProps = {\n  classes: {},\n};\n\nexport default withStyles(styles)(Placeholder);\n","import Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport { answerSelectors } from '../../../state/answer';\nimport { questionSelectors } from '../../../state/question';\nimport BarChart from '../../components/BarChart/BarChart';\nimport Divider from '../../components/Divider/Divider';\nimport Placeholder from './Placeholder';\nimport styles from './styles';\n\nexport const Results = ({\n  classes,\n  questionText,\n  answersAmount,\n  answerChartData,\n}) => {\n  if (!answersAmount) {\n    return <Placeholder />;\n  }\n  console.log(answerChartData);\n  return (\n    <Grid\n      className={classes.root}\n      container\n      direction=\"column\"\n      justify=\"space-between\"\n    >\n      <Grid container item direction=\"column\">\n        {questionText}\n\n        <Divider />\n\n        <BarChart\n          data={answerChartData}\n          xAxisDataKey=\"questionOptionText\"\n          barDataKey=\"amount\"\n          margin={{ left: -20, right: 5, bottom: 5 }}\n        />\n      </Grid>\n\n      <Grid item>\n        <Grid\n          container\n          item\n          justify=\"flex-start\"\n          alignItems=\"center\"\n          direction=\"row\"\n        >\n          <Grid item>{`Total votes: ${answersAmount}`}</Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nResults.propTypes = {\n  questionText: PropTypes.string,\n  answersAmount: PropTypes.number,\n  answerChartData: PropTypes.array,\n};\n\nResults.defaultProps = {\n  questionText: '',\n  answersAmount: 0,\n  answerChartData: [],\n};\n\nconst mapStateToProps = createStructuredSelector({\n  questionText: questionSelectors.questionTextSelector,\n  answersAmount: answerSelectors.answersAmountSelector,\n  answerChartData: answerSelectors.answerChartDataSelector,\n});\n\nexport default compose(\n  withStyles(styles),\n  connect(mapStateToProps)\n)(Results);\n","import Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport AnswerForm from '../../containers/AnswerForm/AnswerForm';\nimport QuestionForm from '../../containers/QuestionForm/QuestionForm';\nimport Results from '../../containers/Results/Results';\nimport styles from './styles';\n\nconst Main = ({ classes }) => (\n  <Fragment>\n    <Typography className={classes.headerText} variant=\"h2\">\n      Sir Vote-a-lot\n    </Typography>\n\n    <div className={classes.root}>\n      <Grid container>\n        <Grid className={classes.box} item xs={12} sm={4}>\n          <QuestionForm />\n        </Grid>\n        <Grid className={classes.box} item xs={12} sm={4}>\n          <AnswerForm />\n        </Grid>\n        <Grid className={classes.box} item xs={12} sm={4}>\n          <Results />\n        </Grid>\n      </Grid>\n    </div>\n  </Fragment>\n);\n\nMain.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Main);\n","export default {\n  root: {\n    flexGrow: 1,\n  },\n  headerText: {\n    margin: 10,\n  },\n  box: {\n    padding: 10,\n    minHeight: 300,\n    border: '1px solid black',\n  },\n};\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Main from './views/layouts/Main/Main';\n\nconst App = ({ store }) => (\n  <Provider store={store}>\n    <Main />\n  </Provider>\n);\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport answer from './answer';\nimport error from './error';\nimport question from './question';\nimport types from './types';\n\nconst appReducer = combineReducers({\n  question,\n  answer,\n  error,\n});\n\nconst rootReducer = (state, action) => {\n  if (action.type === types.PURGE_STATE) {\n    return appReducer({}, action);\n  }\n\n  return appReducer(state, action);\n};\n\nexport default rootReducer;\n","import { createStore } from 'redux';\nimport rootReducer from './state';\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport { store };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './configureStore';\nimport './index.css';\n\nReactDOM.render(<App store={store} />, document.getElementById('root'));\n"],"sourceRoot":""}